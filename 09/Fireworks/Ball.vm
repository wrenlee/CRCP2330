function Ball.new 0
push constant 4
call Memory.alloc 1
pop pointer 0
push constant 512
push constant 2
call Math.divide 2
pop this 0
push constant 256
push constant 2
call Math.divide 2
pop this 1
push constant 1
pop this 2
push constant 1
pop this 3
push pointer 0
return
function Ball.display 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push constant 5
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Ball.incSpeed 0
push argument 0
pop pointer 0
label WHILE_EXP0
push this 2
push constant 20
gt
not
if-goto WHILE_END0
push this 2
push constant 1
add
pop this 2
goto WHILE_EXP0
label WHILE_END0
push this 2
push constant 20
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 5
pop this 2
label IF_FALSE0
label WHILE_EXP1
push this 3
push constant 20
gt
not
if-goto WHILE_END1
push this 3
push constant 1
add
pop this 3
goto WHILE_EXP1
label WHILE_END1
push this 3
push constant 20
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 5
pop this 3
label IF_FALSE1
push constant 0
return
function Ball.move 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push constant 5
call Screen.drawCircle 3
pop temp 0
push this 0
push this 2
add
pop this 0
push this 1
push this 3
add
pop this 1
push this 0
push constant 5
add
push constant 20
lt
push this 0
push constant 5
add
push constant 450
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 2
push constant 1
neg
call Math.multiply 2
pop this 2
label IF_FALSE0
push this 1
push constant 5
add
push constant 20
lt
push this 1
push constant 5
add
push constant 245
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 3
push constant 1
neg
call Math.multiply 2
pop this 3
label IF_FALSE1
push argument 1
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 2
push constant 1
neg
call Math.multiply 2
pop this 2
push this 3
push constant 1
neg
call Math.multiply 2
pop this 3
label IF_FALSE2
push pointer 0
call Ball.display 1
pop temp 0
push constant 0
return
function Ball.bounce 0
push argument 0
pop pointer 0
push this 2
push constant 1
neg
call Math.multiply 2
pop this 2
push this 3
push constant 1
neg
call Math.multiply 2
pop this 3
push constant 0
return
function Ball.getX 0
push argument 0
pop pointer 0
push this 0
return
function Ball.getY 0
push argument 0
pop pointer 0
push this 1
return
function Ball.memory 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
