// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //15     14 13 12 11 10 9  8  7  6  5  4  3  2  1  0
    //opcode 1  1  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3

    //a = 0 -> 1
    //c = 1 -> 0 -> 1
    Not(in=instruction[15], out=aInstruction); //even though opcode is 0, if you want to signal it's an a instruction it needs to be 1
    Not(in=aInstruction, out=cInstruction);

    And(a=cInstruction, b=instruction[5], out=aluOrIn); //instruction 5/d1 a, 1 = use a register
    Mux16(a=instruction, b=aluOut, sel=aluOrIn, out=mux1); //alu output v instruction
    Or(a=aluOrIn, b=aInstruction, out=aLoad); //load a register or 
    Register(in=mux1, load=aLoad, out=aReg, out=addressM); //a register

    Mux16(a=aReg, b=inM, sel=instruction[12], out=mux2); //a register v m memory

    And(a=instruction[4], b=cInstruction, out=dAnd);//instruction 4/d2 = d, 1 = use d register
    Register(in=aluOut, load=dAnd, out=dReg); //d register

    ALU(x=dReg, y=mux2, zx=address[11], nx=address[10], zy=address[9], ny=address[8], f=address[7], no=address[6], out=outM, out=aluOut, zr=aluZr, ng=aluNg);

    //jumps


    //pc inc 1 = increments
    Or(a=instruction[0], b=instruction[1], out=pcOr1);
    Or(a=instruction[3], b=pcOr1, out=pcOr);
    Not(in=pcOr, out=notPcOr);
    //load a register or not, inputs from a register
    PC(in=aReg, inc=notPcOr, load=instruction[15], reset=reset, out[0..14]=pc); //outputs 15 bits of next instruction

    //writeM
    Or(a=instruction[5], b=instruction[4], out=write1);
    Or(a=write1, b=instruction[3], out=writeM);
}